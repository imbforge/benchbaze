# Generated by Django 4.2.17 on 2025-05-15 16:26

import collection.shared.models
import common.models
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django_better_admin_arrayfield.models.fields
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("collection", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Antibody",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "species_isotype",
                    models.CharField(max_length=255, verbose_name="species/isotype"),
                ),
                (
                    "clone",
                    models.CharField(blank=True, max_length=255, verbose_name="clone"),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "catalogue_number",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="catalogue number"
                    ),
                ),
                (
                    "l_ocation",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location"
                    ),
                ),
                (
                    "a_pplication",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="application"
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(blank=True, verbose_name="description/comments"),
                ),
                (
                    "info_sheet",
                    models.FileField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        null=True,
                        upload_to="collection/antibody/",
                        verbose_name="info sheet",
                    ),
                ),
                (
                    "availability",
                    models.BooleanField(default=True, verbose_name="available?"),
                ),
            ],
            options={
                "verbose_name": "antibody",
                "verbose_name_plural": "antibodies",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                common.models.DownloadFileNameMixin,
                collection.shared.models.InfoSheetMaxSizeMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="AntibodyDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "antibody document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="CellLine",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "history_integrated_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmid",
                    ),
                ),
                (
                    "history_episomal_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="episomal plasmids",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, unique=True, verbose_name="name"),
                ),
                ("box_name", models.CharField(max_length=255, verbose_name="box")),
                (
                    "alternative_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alternative name"
                    ),
                ),
                (
                    "parental_line_old",
                    models.CharField(max_length=255, verbose_name="parental cell line"),
                ),
                (
                    "cell_type_tissue",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="cell type/tissue"
                    ),
                ),
                (
                    "culture_type",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="culture type"
                    ),
                ),
                (
                    "growth_condition",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="growth conditions"
                    ),
                ),
                (
                    "freezing_medium",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="freezing medium"
                    ),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(blank=True, verbose_name="description/comments"),
                ),
                (
                    "s2_work",
                    models.BooleanField(
                        default=False,
                        help_text="Check, for example, for a cell line created by lentiviral trunsdunction",
                        verbose_name="Used for S2 work?",
                    ),
                ),
            ],
            options={
                "verbose_name": "cell line",
                "verbose_name_plural": "cell lines",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                collection.shared.models.CommonCollectionModelPropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CellLineDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "description",
                    models.CharField(
                        choices=[
                            ("virus", "Virus test"),
                            ("mycoplasma", "Mycoplasma test"),
                            ("fingerprint", "Fingerprinting"),
                            ("other", "Other"),
                        ],
                        max_length=255,
                        verbose_name="doc type",
                    ),
                ),
                (
                    "date_of_test",
                    models.DateField(null=True, verbose_name="date of test"),
                ),
            ],
            options={
                "verbose_name": "cell line document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="CellLineEpisomalPlasmid",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "s2_work_episomal_plasmid",
                    models.BooleanField(
                        default=False,
                        help_text="Check, for example, for lentiviral packaging plasmids",
                        verbose_name="Used for S2 work?",
                    ),
                ),
                ("created_date", models.DateField(null=True, verbose_name="created")),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EColiStrain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "resistance",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="resistance"
                    ),
                ),
                ("genotype", models.TextField(blank=True, verbose_name="genotype")),
                (
                    "background",
                    models.CharField(
                        blank=True,
                        choices=[("B", "B"), ("C", "C"), ("K12", "K12"), ("W", "W")],
                        max_length=255,
                        verbose_name="background",
                    ),
                ),
                ("supplier", models.CharField(max_length=255, verbose_name="supplier")),
                (
                    "us_e",
                    models.CharField(
                        choices=[
                            ("Cloning", "Cloning"),
                            ("Expression", "Expression"),
                            ("Other", "Other"),
                        ],
                        max_length=255,
                        verbose_name="use",
                    ),
                ),
                ("purpose", models.TextField(blank=True, verbose_name="purpose")),
                (
                    "note",
                    models.TextField(blank=True, max_length=255, verbose_name="note"),
                ),
            ],
            options={
                "verbose_name": "strain - E. coli",
                "verbose_name_plural": "strains - E. coli",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                collection.shared.models.CommonCollectionModelPropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="EColiStrainDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "e. coli strain document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="HistoricalAntibody",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "species_isotype",
                    models.CharField(max_length=255, verbose_name="species/isotype"),
                ),
                (
                    "clone",
                    models.CharField(blank=True, max_length=255, verbose_name="clone"),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "catalogue_number",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="catalogue number"
                    ),
                ),
                (
                    "l_ocation",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location"
                    ),
                ),
                (
                    "a_pplication",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="application"
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(blank=True, verbose_name="description/comments"),
                ),
                (
                    "info_sheet",
                    models.TextField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        max_length=100,
                        null=True,
                        verbose_name="info sheet",
                    ),
                ),
                (
                    "availability",
                    models.BooleanField(default=True, verbose_name="available?"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical antibody",
                "verbose_name_plural": "historical antibodies",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCellLine",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "history_integrated_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmid",
                    ),
                ),
                (
                    "history_episomal_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="episomal plasmids",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=255, verbose_name="name"
                    ),
                ),
                ("box_name", models.CharField(max_length=255, verbose_name="box")),
                (
                    "alternative_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alternative name"
                    ),
                ),
                (
                    "parental_line_old",
                    models.CharField(max_length=255, verbose_name="parental cell line"),
                ),
                (
                    "cell_type_tissue",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="cell type/tissue"
                    ),
                ),
                (
                    "culture_type",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="culture type"
                    ),
                ),
                (
                    "growth_condition",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="growth conditions"
                    ),
                ),
                (
                    "freezing_medium",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="freezing medium"
                    ),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(blank=True, verbose_name="description/comments"),
                ),
                (
                    "s2_work",
                    models.BooleanField(
                        default=False,
                        help_text="Check, for example, for a cell line created by lentiviral trunsdunction",
                        verbose_name="Used for S2 work?",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical cell line",
                "verbose_name_plural": "historical cell lines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEColiStrain",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "resistance",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="resistance"
                    ),
                ),
                ("genotype", models.TextField(blank=True, verbose_name="genotype")),
                (
                    "background",
                    models.CharField(
                        blank=True,
                        choices=[("B", "B"), ("C", "C"), ("K12", "K12"), ("W", "W")],
                        max_length=255,
                        verbose_name="background",
                    ),
                ),
                ("supplier", models.CharField(max_length=255, verbose_name="supplier")),
                (
                    "us_e",
                    models.CharField(
                        choices=[
                            ("Cloning", "Cloning"),
                            ("Expression", "Expression"),
                            ("Other", "Other"),
                        ],
                        max_length=255,
                        verbose_name="use",
                    ),
                ),
                ("purpose", models.TextField(blank=True, verbose_name="purpose")),
                (
                    "note",
                    models.TextField(blank=True, max_length=255, verbose_name="note"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical strain - E. coli",
                "verbose_name_plural": "historical strains - E. coli",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalInhibitor",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "other_names",
                    models.CharField(max_length=255, verbose_name="other names"),
                ),
                (
                    "target",
                    models.CharField(blank=True, max_length=255, verbose_name="target"),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "catalogue_number",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="catalogue number"
                    ),
                ),
                (
                    "l_ocation",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location"
                    ),
                ),
                (
                    "ic50",
                    models.CharField(blank=True, max_length=255, verbose_name="IC50"),
                ),
                (
                    "amount",
                    models.CharField(blank=True, max_length=255, verbose_name="amount"),
                ),
                (
                    "stock_solution",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="stock solution"
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(blank=True, verbose_name="description/comments"),
                ),
                (
                    "info_sheet",
                    models.TextField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        max_length=100,
                        null=True,
                        verbose_name="info sheet",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical inhibitor",
                "verbose_name_plural": "historical inhibitors",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalOligo",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=255, verbose_name="name"
                    ),
                ),
                (
                    "sequence",
                    models.CharField(
                        db_index=True, max_length=2048, verbose_name="sequence"
                    ),
                ),
                ("length", models.SmallIntegerField(null=True, verbose_name="length")),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "gene",
                    models.CharField(blank=True, max_length=255, verbose_name="gene"),
                ),
                (
                    "restriction_site",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="restriction sites"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="comments"
                    ),
                ),
                (
                    "info_sheet",
                    models.TextField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        max_length=100,
                        null=True,
                        verbose_name="info sheet",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical oligo",
                "verbose_name_plural": "historical oligos",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPlasmid",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=255, verbose_name="name"
                    ),
                ),
                (
                    "other_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="other name"
                    ),
                ),
                (
                    "old_parent_vector",
                    models.CharField(
                        blank=True,
                        help_text="Use only when strictly necessary",
                        max_length=255,
                        verbose_name="orig. parent vector field",
                    ),
                ),
                (
                    "selection",
                    models.CharField(max_length=50, verbose_name="selection"),
                ),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "construction_feature",
                    models.TextField(blank=True, verbose_name="construction/features"),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "note",
                    models.CharField(blank=True, max_length=300, verbose_name="note"),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="reference"
                    ),
                ),
                (
                    "map",
                    models.TextField(
                        blank=True,
                        help_text="only SnapGene .dna files, max. 2 MB",
                        max_length=100,
                        verbose_name="Map (.dna)",
                    ),
                ),
                (
                    "map_png",
                    models.TextField(
                        blank=True, max_length=100, verbose_name="Map image"
                    ),
                ),
                (
                    "map_gbk",
                    models.TextField(
                        blank=True,
                        help_text="only .gbk or .gb files, max. 2 MB",
                        max_length=100,
                        verbose_name="Map (.gbk)",
                    ),
                ),
                (
                    "history_formz_ecoli_strains",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="e. coli strains",
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical plasmid",
                "verbose_name_plural": "historical plasmids",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSaCerevisiaeStrain",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_integrated_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmid",
                    ),
                ),
                (
                    "history_cassette_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="cassette plasmids",
                    ),
                ),
                (
                    "history_episomal_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="episomal plasmids",
                    ),
                ),
                (
                    "history_all_plasmids_in_stocked_strain",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="all plasmids in stocked strain",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "relevant_genotype",
                    models.CharField(max_length=255, verbose_name="relevant genotype"),
                ),
                (
                    "mating_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "a"),
                            ("alpha", "alpha"),
                            ("unknown", "unknown"),
                            ("a/a", "a/a"),
                            ("alpha/alpha", "alpha/alpha"),
                            ("a/alpha", "a/alpha"),
                            ("other", "other"),
                        ],
                        max_length=20,
                        verbose_name="mating type",
                    ),
                ),
                (
                    "chromosomal_genotype",
                    models.TextField(blank=True, verbose_name="chromosomal genotype"),
                ),
                (
                    "parental_strain",
                    models.CharField(
                        blank=True,
                        help_text="Use only when 'Parent 1' does not apply",
                        max_length=255,
                        verbose_name="parental strain",
                    ),
                ),
                (
                    "construction",
                    models.TextField(blank=True, verbose_name="construction"),
                ),
                (
                    "modification",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="modification"
                    ),
                ),
                (
                    "plasmids",
                    models.CharField(
                        blank=True,
                        help_text="Use only when the other plasmid fields do not apply",
                        max_length=255,
                        verbose_name="plasmids",
                    ),
                ),
                (
                    "selection",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="selection"
                    ),
                ),
                (
                    "phenotype",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="phenotype"
                    ),
                ),
                (
                    "background",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="background"
                    ),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "note",
                    models.CharField(blank=True, max_length=255, verbose_name="note"),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="reference"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical strain - Sa. cerevisiae",
                "verbose_name_plural": "historical strains - Sa. cerevisiae",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalScPombeStrain",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_integrated_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmid",
                    ),
                ),
                (
                    "history_cassette_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="cassette plasmids",
                    ),
                ),
                (
                    "history_episomal_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="episomal plasmids",
                    ),
                ),
                (
                    "history_all_plasmids_in_stocked_strain",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="all plasmids in stocked strain",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("box_number", models.SmallIntegerField(verbose_name="box number")),
                (
                    "parental_strain",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="parental strains"
                    ),
                ),
                (
                    "mating_type",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="mating type"
                    ),
                ),
                (
                    "auxotrophic_marker",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="auxotrophic markers"
                    ),
                ),
                ("name", models.TextField(verbose_name="genotype")),
                (
                    "phenotype",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="phenotype"
                    ),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="comments"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical strain - Sc. pombe",
                "verbose_name_plural": "historical strains - Sc. pombe",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSiRna",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "sequence",
                    models.CharField(max_length=50, verbose_name="sequence - Sense"),
                ),
                (
                    "sequence_antisense",
                    models.CharField(
                        max_length=50, verbose_name="sequence - Antisense"
                    ),
                ),
                ("supplier", models.CharField(max_length=255, verbose_name="supplier")),
                (
                    "supplier_part_no",
                    models.CharField(max_length=255, verbose_name="supplier Part-No"),
                ),
                (
                    "supplier_si_rna_id",
                    models.CharField(max_length=255, verbose_name="supplier siRNA ID"),
                ),
                (
                    "target_genes",
                    django_better_admin_arrayfield.models.fields.ArrayField(
                        base_field=models.CharField(max_length=15),
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "locus_ids",
                    django_better_admin_arrayfield.models.fields.ArrayField(
                        base_field=models.CharField(max_length=15),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="locus IDs",
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(
                        blank=True,
                        help_text="Include transfection conditions, etc. here",
                        verbose_name="description/comments",
                    ),
                ),
                (
                    "info_sheet",
                    models.TextField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        max_length=100,
                        null=True,
                        verbose_name="info sheet",
                    ),
                ),
                (
                    "history_orders",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="order",
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical siRNA",
                "verbose_name_plural": "historical siRNAs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalWormStrain",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "chromosomal_genotype",
                    models.TextField(blank=True, verbose_name="chromosomal genotype"),
                ),
                (
                    "construction",
                    models.TextField(blank=True, verbose_name="construction"),
                ),
                (
                    "outcrossed",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="outcrossed"
                    ),
                ),
                (
                    "growth_conditions",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="growth conditions"
                    ),
                ),
                (
                    "organism",
                    models.CharField(
                        choices=[
                            ("celegans", "Caenorhabditis elegans"),
                            ("cbriggsae", "Caenorhabditis briggsae"),
                            ("cinopinata", "Caenorhabditis inopinata"),
                            ("cjaponica", "Caenorhabditis japonica"),
                            ("ppacificus", "Pristionchus pacificus"),
                        ],
                        default="celegans",
                        max_length=15,
                        verbose_name="organism",
                    ),
                ),
                (
                    "selection",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="selection"
                    ),
                ),
                ("phenotype", models.TextField(blank=True, verbose_name="phenotype")),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "note",
                    models.CharField(blank=True, max_length=255, verbose_name="note"),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="reference"
                    ),
                ),
                (
                    "at_cgc",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Caenorhabditis Genetics Center",
                        verbose_name="at CGC?",
                    ),
                ),
                (
                    "location_freezer1",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location Freezer 1"
                    ),
                ),
                (
                    "location_freezer2",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location Freezer 2"
                    ),
                ),
                (
                    "location_backup",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location Backup"
                    ),
                ),
                (
                    "history_integrated_dna_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmids",
                    ),
                ),
                (
                    "history_integrated_dna_oligos",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated oligos",
                    ),
                ),
                (
                    "history_genotyping_oligos",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genotyping oligos",
                    ),
                ),
                (
                    "history_alleles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="alleles",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical strain - Worm",
                "verbose_name_plural": "historical strains - Worm",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalWormStrainAllele",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="last changed"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "lab_identifier",
                    models.CharField(
                        max_length=15, verbose_name="prefix/Lab identifier"
                    ),
                ),
                (
                    "typ_e",
                    models.CharField(
                        choices=[("t", "Transgene"), ("m", "Mutation")],
                        max_length=5,
                        verbose_name="type",
                    ),
                ),
                (
                    "transgene",
                    models.CharField(
                        blank=True,
                        help_text="Genotype",
                        max_length=255,
                        verbose_name="transgene",
                    ),
                ),
                (
                    "transgene_position",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="transgene position"
                    ),
                ),
                (
                    "mutation",
                    models.CharField(
                        blank=True,
                        help_text="Genotype",
                        max_length=255,
                        verbose_name="mutation",
                    ),
                ),
                (
                    "mutation_type",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="mutation type"
                    ),
                ),
                (
                    "mutation_position",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="mutation position"
                    ),
                ),
                (
                    "made_by_person",
                    models.CharField(max_length=255, verbose_name="made by person"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "map",
                    models.TextField(
                        blank=True,
                        help_text="only SnapGene .dna files, max. 2 MB",
                        max_length=100,
                        verbose_name="map (.dna)",
                    ),
                ),
                (
                    "map_png",
                    models.TextField(
                        blank=True, max_length=100, verbose_name="map (.png)"
                    ),
                ),
                (
                    "map_gbk",
                    models.TextField(
                        blank=True,
                        help_text="only .gbk or .gb files, max. 2 MB",
                        max_length=100,
                        verbose_name="Map (.gbk)",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                (
                    "history_made_with_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="made with plasmids",
                    ),
                ),
                (
                    "history_transgene_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="transgene plasmids",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical allele - Worm",
                "verbose_name_plural": "historical alleles - Worm",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Inhibitor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "other_names",
                    models.CharField(max_length=255, verbose_name="other names"),
                ),
                (
                    "target",
                    models.CharField(blank=True, max_length=255, verbose_name="target"),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "catalogue_number",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="catalogue number"
                    ),
                ),
                (
                    "l_ocation",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location"
                    ),
                ),
                (
                    "ic50",
                    models.CharField(blank=True, max_length=255, verbose_name="IC50"),
                ),
                (
                    "amount",
                    models.CharField(blank=True, max_length=255, verbose_name="amount"),
                ),
                (
                    "stock_solution",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="stock solution"
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(blank=True, verbose_name="description/comments"),
                ),
                (
                    "info_sheet",
                    models.FileField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        null=True,
                        upload_to="collection/inhibitor/",
                        verbose_name="info sheet",
                    ),
                ),
            ],
            options={
                "verbose_name": "inhibitor",
                "verbose_name_plural": "inhibitors",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                common.models.DownloadFileNameMixin,
                collection.shared.models.InfoSheetMaxSizeMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="InhibitorDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "inhibitor document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="Oligo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, unique=True, verbose_name="name"),
                ),
                (
                    "sequence",
                    models.CharField(
                        db_collation="case_insensitive",
                        max_length=2048,
                        unique=True,
                        verbose_name="sequence",
                    ),
                ),
                ("length", models.SmallIntegerField(null=True, verbose_name="length")),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "gene",
                    models.CharField(blank=True, max_length=255, verbose_name="gene"),
                ),
                (
                    "restriction_site",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="restriction sites"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="comments"
                    ),
                ),
                (
                    "info_sheet",
                    models.FileField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        null=True,
                        upload_to="collection/oligo/",
                        verbose_name="info sheet",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
            ],
            options={
                "verbose_name": "oligo",
                "verbose_name_plural": "oligos",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                common.models.DownloadFileNameMixin,
                collection.shared.models.InfoSheetMaxSizeMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="OligoDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "oligo document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="Plasmid",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, unique=True, verbose_name="name"),
                ),
                (
                    "other_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="other name"
                    ),
                ),
                (
                    "old_parent_vector",
                    models.CharField(
                        blank=True,
                        help_text="Use only when strictly necessary",
                        max_length=255,
                        verbose_name="orig. parent vector field",
                    ),
                ),
                (
                    "selection",
                    models.CharField(max_length=50, verbose_name="selection"),
                ),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "construction_feature",
                    models.TextField(blank=True, verbose_name="construction/features"),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "note",
                    models.CharField(blank=True, max_length=300, verbose_name="note"),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="reference"
                    ),
                ),
                (
                    "map",
                    models.FileField(
                        blank=True,
                        help_text="only SnapGene .dna files, max. 2 MB",
                        upload_to="collection/plasmid/dna/",
                        verbose_name="Map (.dna)",
                    ),
                ),
                (
                    "map_png",
                    models.ImageField(
                        blank=True,
                        upload_to="collection/plasmid/png/",
                        verbose_name="Map image",
                    ),
                ),
                (
                    "map_gbk",
                    models.FileField(
                        blank=True,
                        help_text="only .gbk or .gb files, max. 2 MB",
                        upload_to="collection/plasmid/gbk/",
                        verbose_name="Map (.gbk)",
                    ),
                ),
                (
                    "history_formz_ecoli_strains",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="e. coli strains",
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
            ],
            options={
                "verbose_name": "plasmid",
                "verbose_name_plural": "plasmids",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                common.models.DownloadFileNameMixin,
                collection.shared.models.CommonCollectionModelPropertiesMixin,
                collection.shared.models.MapFileChecPropertieskMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PlasmidDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "plasmid document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="SaCerevisiaeStrain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_integrated_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmid",
                    ),
                ),
                (
                    "history_cassette_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="cassette plasmids",
                    ),
                ),
                (
                    "history_episomal_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="episomal plasmids",
                    ),
                ),
                (
                    "history_all_plasmids_in_stocked_strain",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="all plasmids in stocked strain",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "relevant_genotype",
                    models.CharField(max_length=255, verbose_name="relevant genotype"),
                ),
                (
                    "mating_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "a"),
                            ("alpha", "alpha"),
                            ("unknown", "unknown"),
                            ("a/a", "a/a"),
                            ("alpha/alpha", "alpha/alpha"),
                            ("a/alpha", "a/alpha"),
                            ("other", "other"),
                        ],
                        max_length=20,
                        verbose_name="mating type",
                    ),
                ),
                (
                    "chromosomal_genotype",
                    models.TextField(blank=True, verbose_name="chromosomal genotype"),
                ),
                (
                    "parental_strain",
                    models.CharField(
                        blank=True,
                        help_text="Use only when 'Parent 1' does not apply",
                        max_length=255,
                        verbose_name="parental strain",
                    ),
                ),
                (
                    "construction",
                    models.TextField(blank=True, verbose_name="construction"),
                ),
                (
                    "modification",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="modification"
                    ),
                ),
                (
                    "plasmids",
                    models.CharField(
                        blank=True,
                        help_text="Use only when the other plasmid fields do not apply",
                        max_length=255,
                        verbose_name="plasmids",
                    ),
                ),
                (
                    "selection",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="selection"
                    ),
                ),
                (
                    "phenotype",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="phenotype"
                    ),
                ),
                (
                    "background",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="background"
                    ),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "note",
                    models.CharField(blank=True, max_length=255, verbose_name="note"),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="reference"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
            ],
            options={
                "verbose_name": "strain - Sa. cerevisiae",
                "verbose_name_plural": "strains - Sa. cerevisiae",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                collection.shared.models.CommonCollectionModelPropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SaCerevisiaeStrainDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "sa. cerevisiae strain document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="SaCerevisiaeStrainEpisomalPlasmid",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "present_in_stocked_strain",
                    models.BooleanField(
                        default=False,
                        help_text="Check, if the culture you stocked for the -80° C collection contains an episomal plasmid. Leave unchecked, if you simply want to record that you have transiently transformed this strain with an episomal plasmid",
                        verbose_name="present in -80° C stock?",
                    ),
                ),
                (
                    "created_date",
                    models.DateField(blank=True, null=True, verbose_name="created"),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScPombeStrain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_integrated_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmid",
                    ),
                ),
                (
                    "history_cassette_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="cassette plasmids",
                    ),
                ),
                (
                    "history_episomal_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="episomal plasmids",
                    ),
                ),
                (
                    "history_all_plasmids_in_stocked_strain",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="all plasmids in stocked strain",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("box_number", models.SmallIntegerField(verbose_name="box number")),
                (
                    "parental_strain",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="parental strains"
                    ),
                ),
                (
                    "mating_type",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="mating type"
                    ),
                ),
                (
                    "auxotrophic_marker",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="auxotrophic markers"
                    ),
                ),
                ("name", models.TextField(verbose_name="genotype")),
                (
                    "phenotype",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="phenotype"
                    ),
                ),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="comments"
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
            ],
            options={
                "verbose_name": "strain - Sc. pombe",
                "verbose_name_plural": "strains - Sc. pombe",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                collection.shared.models.CommonCollectionModelPropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ScPombeStrainDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "sc. pombe strain document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="ScPombeStrainEpisomalPlasmid",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "present_in_stocked_strain",
                    models.BooleanField(
                        default=False, verbose_name="present in -80° C stock?"
                    ),
                ),
                (
                    "created_date",
                    models.DateField(blank=True, null=True, verbose_name="created"),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SiRna",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "sequence",
                    models.CharField(max_length=50, verbose_name="sequence - Sense"),
                ),
                (
                    "sequence_antisense",
                    models.CharField(
                        max_length=50, verbose_name="sequence - Antisense"
                    ),
                ),
                ("supplier", models.CharField(max_length=255, verbose_name="supplier")),
                (
                    "supplier_part_no",
                    models.CharField(max_length=255, verbose_name="supplier Part-No"),
                ),
                (
                    "supplier_si_rna_id",
                    models.CharField(max_length=255, verbose_name="supplier siRNA ID"),
                ),
                (
                    "target_genes",
                    django_better_admin_arrayfield.models.fields.ArrayField(
                        base_field=models.CharField(max_length=15),
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "locus_ids",
                    django_better_admin_arrayfield.models.fields.ArrayField(
                        base_field=models.CharField(max_length=15),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="locus IDs",
                    ),
                ),
                (
                    "description_comment",
                    models.TextField(
                        blank=True,
                        help_text="Include transfection conditions, etc. here",
                        verbose_name="description/comments",
                    ),
                ),
                (
                    "info_sheet",
                    models.FileField(
                        blank=True,
                        help_text="only .pdf files, max. 2 MB",
                        null=True,
                        upload_to="collection/sirna/",
                        verbose_name="info sheet",
                    ),
                ),
                (
                    "history_orders",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="order",
                    ),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
            ],
            options={
                "verbose_name": "siRNA",
                "verbose_name_plural": "siRNAs",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                common.models.DownloadFileNameMixin,
                collection.shared.models.InfoSheetMaxSizeMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SiRnaDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
            ],
            options={
                "verbose_name": "siRNA document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="WormStrain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_approval_by_pi",
                    models.BooleanField(
                        default=False, verbose_name="record creation approval"
                    ),
                ),
                (
                    "last_changed_approval_by_pi",
                    models.BooleanField(
                        default=None, null=True, verbose_name="record change approval"
                    ),
                ),
                (
                    "approval_by_pi_date_time",
                    models.DateTimeField(default=None, null=True),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "formz_risk_group",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2)], null=True, verbose_name="risk group"
                    ),
                ),
                (
                    "destroyed_date",
                    models.DateField(blank=True, null=True, verbose_name="destroyed"),
                ),
                (
                    "history_formz_projects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formZ projects",
                    ),
                ),
                (
                    "history_formz_gentech_methods",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genTech methods",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "chromosomal_genotype",
                    models.TextField(blank=True, verbose_name="chromosomal genotype"),
                ),
                (
                    "construction",
                    models.TextField(blank=True, verbose_name="construction"),
                ),
                (
                    "outcrossed",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="outcrossed"
                    ),
                ),
                (
                    "growth_conditions",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="growth conditions"
                    ),
                ),
                (
                    "organism",
                    models.CharField(
                        choices=[
                            ("celegans", "Caenorhabditis elegans"),
                            ("cbriggsae", "Caenorhabditis briggsae"),
                            ("cinopinata", "Caenorhabditis inopinata"),
                            ("cjaponica", "Caenorhabditis japonica"),
                            ("ppacificus", "Pristionchus pacificus"),
                        ],
                        default="celegans",
                        max_length=15,
                        verbose_name="organism",
                    ),
                ),
                (
                    "selection",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="selection"
                    ),
                ),
                ("phenotype", models.TextField(blank=True, verbose_name="phenotype")),
                (
                    "received_from",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="received from"
                    ),
                ),
                (
                    "us_e",
                    models.CharField(blank=True, max_length=255, verbose_name="use"),
                ),
                (
                    "note",
                    models.CharField(blank=True, max_length=255, verbose_name="note"),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="reference"
                    ),
                ),
                (
                    "at_cgc",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Caenorhabditis Genetics Center",
                        verbose_name="at CGC?",
                    ),
                ),
                (
                    "location_freezer1",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location Freezer 1"
                    ),
                ),
                (
                    "location_freezer2",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location Freezer 2"
                    ),
                ),
                (
                    "location_backup",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location Backup"
                    ),
                ),
                (
                    "history_integrated_dna_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated plasmids",
                    ),
                ),
                (
                    "history_integrated_dna_oligos",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="integrated oligos",
                    ),
                ),
                (
                    "history_genotyping_oligos",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="genotyping oligos",
                    ),
                ),
                (
                    "history_alleles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="alleles",
                    ),
                ),
            ],
            options={
                "verbose_name": "strain - Worm",
                "verbose_name_plural": "strains - Worm",
            },
            bases=(
                common.models.SaveWithoutHistoricalRecord,
                collection.shared.models.CommonCollectionModelPropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="WormStrainAllele",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "history_documents",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="documents",
                    ),
                ),
                (
                    "lab_identifier",
                    models.CharField(
                        max_length=15, verbose_name="prefix/Lab identifier"
                    ),
                ),
                (
                    "typ_e",
                    models.CharField(
                        choices=[("t", "Transgene"), ("m", "Mutation")],
                        max_length=5,
                        verbose_name="type",
                    ),
                ),
                (
                    "transgene",
                    models.CharField(
                        blank=True,
                        help_text="Genotype",
                        max_length=255,
                        verbose_name="transgene",
                    ),
                ),
                (
                    "transgene_position",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="transgene position"
                    ),
                ),
                (
                    "mutation",
                    models.CharField(
                        blank=True,
                        help_text="Genotype",
                        max_length=255,
                        verbose_name="mutation",
                    ),
                ),
                (
                    "mutation_type",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="mutation type"
                    ),
                ),
                (
                    "mutation_position",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="mutation position"
                    ),
                ),
                (
                    "made_by_person",
                    models.CharField(max_length=255, verbose_name="made by person"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "map",
                    models.FileField(
                        blank=True,
                        help_text="only SnapGene .dna files, max. 2 MB",
                        upload_to="collection/wormstrainallele/dna/",
                        verbose_name="map (.dna)",
                    ),
                ),
                (
                    "map_png",
                    models.ImageField(
                        blank=True,
                        upload_to="collection/wormstrainallele/png/",
                        verbose_name="map (.png)",
                    ),
                ),
                (
                    "map_gbk",
                    models.FileField(
                        blank=True,
                        help_text="only .gbk or .gb files, max. 2 MB",
                        upload_to="collection/wormstrainallele/gbk/",
                        verbose_name="Map (.gbk)",
                    ),
                ),
                (
                    "history_sequence_features",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="formz elements",
                    ),
                ),
                (
                    "history_made_with_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="made with plasmids",
                    ),
                ),
                (
                    "history_transgene_plasmids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="transgene plasmids",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_createdby_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "allele - Worm",
                "verbose_name_plural": "alleles - Worm",
            },
            bases=(collection.shared.models.MapFileChecPropertieskMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WormStrainGenotypingAssay",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "locus_allele",
                    models.CharField(max_length=255, verbose_name="locus/allele"),
                ),
                (
                    "oligos",
                    models.ManyToManyField(
                        related_name="%(class)s_oligos", to="collection.oligo"
                    ),
                ),
                (
                    "worm_strain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="collection.wormstrain",
                    ),
                ),
            ],
            options={
                "verbose_name": "worm strain genotyping assay",
                "verbose_name_plural": "worm strain genotyping assays",
            },
        ),
        migrations.CreateModel(
            name="WormStrainDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "worm_strain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="collection.wormstrain",
                    ),
                ),
            ],
            options={
                "verbose_name": "worm strain document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
        migrations.CreateModel(
            name="WormStrainAlleleDoc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.FileField(
                        max_length=150,
                        null=True,
                        upload_to="temp/",
                        verbose_name="file name",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=75, verbose_name="description"),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="comment"
                    ),
                ),
                (
                    "created_date_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "last_changed_date_time",
                    models.DateTimeField(auto_now=True, verbose_name="last changed"),
                ),
                (
                    "worm_strain_allele",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="collection.wormstrainallele",
                    ),
                ),
            ],
            options={
                "verbose_name": "worm strain allele document",
            },
            bases=(models.Model, common.models.RenameFileField),
        ),
    ]
