# Generated by Django 4.2.17 on 2025-05-15 16:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("purchasing", "0001_initial"),
        ("collection", "0002_initial"),
        ("formz", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="wormstrainallele",
            name="made_by_method",
            field=models.ForeignKey(
                help_text="The method used to create the allele",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_made_by_method",
                to="formz.gentechmethod",
                verbose_name="made by method",
            ),
        ),
        migrations.AddField(
            model_name="wormstrainallele",
            name="made_with_plasmids",
            field=models.ManyToManyField(
                blank=True,
                help_text="The plasmid(s) used to create the transgene/mutation",
                to="collection.plasmid",
                verbose_name="made with plasmids",
            ),
        ),
        migrations.AddField(
            model_name="wormstrainallele",
            name="reference_strain",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_reference_strain",
                to="collection.wormstrain",
                verbose_name="reference strain",
            ),
        ),
        migrations.AddField(
            model_name="wormstrainallele",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Searching against the aliases of a sequence feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                to="formz.sequencefeature",
                verbose_name="elements",
            ),
        ),
        migrations.AddField(
            model_name="wormstrainallele",
            name="transgene_plasmids",
            field=models.ManyToManyField(
                blank=True,
                help_text="The plasmid(s) in the transgene",
                related_name="%(class)s_transgene_plasmids",
                to="collection.plasmid",
                verbose_name="transgene plasmids",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="alleles",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_alleles",
                to="collection.wormstrainallele",
                verbose_name="alleles",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.project",
                verbose_name="projects",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="integrated_dna_oligos",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_oligos",
                to="collection.oligo",
                verbose_name="oligos",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="integrated_dna_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
                verbose_name="plasmids",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_1",
                to="collection.wormstrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_2",
                to="collection.wormstrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AddField(
            model_name="wormstrain",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when a feature is not present in the chosen plasmid(s), if any. Searching against the aliases of a feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="sequence features",
            ),
        ),
        migrations.AddField(
            model_name="sirnadoc",
            name="si_rna",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.sirna"
            ),
        ),
        migrations.AddField(
            model_name="sirna",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="sirna",
            name="orders",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_order",
                to="purchasing.order",
                verbose_name="orders",
            ),
        ),
        migrations.AddField(
            model_name="sirna",
            name="species",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="formz.species",
                verbose_name="organism",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrainepisomalplasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmid_projects",
                to="formz.project",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrainepisomalplasmid",
            name="plasmid",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.plasmid",
                verbose_name="Plasmid",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrainepisomalplasmid",
            name="scpombe_strain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.scpombestrain",
            ),
        ),
        migrations.AddField(
            model_name="scpombestraindoc",
            name="scpombe_strain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.scpombestrain",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="cassette_plasmids",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tagging and knock out plasmids",
                related_name="%(class)s_cassette_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="episomal_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmids",
                through="collection.ScPombeStrainEpisomalPlasmid",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.project",
                verbose_name="projects",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="integrated_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_1",
                to="collection.scpombestrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_2",
                to="collection.scpombestrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AddField(
            model_name="scpombestrain",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when a feature is not present in the chosen plasmid(s), if any. Searching against the aliases of a feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="sequence features",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrainepisomalplasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                blank=True,
                related_name="cerevisiae_episomal_plasmid_projects",
                to="formz.project",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrainepisomalplasmid",
            name="plasmid",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.plasmid",
                verbose_name="Plasmid",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrainepisomalplasmid",
            name="sacerevisiae_strain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.sacerevisiaestrain",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestraindoc",
            name="sacerevisiae_strain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.sacerevisiaestrain",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="cassette_plasmids",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tagging and knock out plasmids",
                related_name="%(class)s_cassette_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="episomal_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmids",
                through="collection.SaCerevisiaeStrainEpisomalPlasmid",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.project",
                verbose_name="projects",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="integrated_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_1",
                to="collection.sacerevisiaestrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_2",
                to="collection.sacerevisiaestrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AddField(
            model_name="sacerevisiaestrain",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when a feature is not present in the chosen plasmid(s), if any. Searching against the aliases of a feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="sequence features",
            ),
        ),
        migrations.AddField(
            model_name="plasmiddoc",
            name="plasmid",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.plasmid"
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="formz_ecoli_strains",
            field=models.ManyToManyField(
                related_name="%(class)s_ecoli_strains",
                to="collection.ecolistrain",
                verbose_name="e. coli strains",
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.project",
                verbose_name="projects",
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="parent_vector",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_vector",
                to="collection.plasmid",
                verbose_name="parent vector",
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when a feature is not present in the chosen plasmid(s), if any. Searching against the aliases of a feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="sequence features",
            ),
        ),
        migrations.AddField(
            model_name="plasmid",
            name="vector_zkbs",
            field=models.ForeignKey(
                help_text='The backbone of the plasmid, from the ZKBS database. If not applicable, choose none. <a href="/formz/zkbsplasmid/" target="_blank">View all</a>',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="formz.zkbsplasmid",
                verbose_name="ZKBS database vector",
            ),
        ),
        migrations.AddField(
            model_name="oligodoc",
            name="oligo",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.oligo"
            ),
        ),
        migrations.AddField(
            model_name="oligo",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="oligo",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="elements",
            ),
        ),
        migrations.AddField(
            model_name="inhibitordoc",
            name="inhibitor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.inhibitor"
            ),
        ),
        migrations.AddField(
            model_name="inhibitor",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrainallele",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrainallele",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrainallele",
            name="made_by_method",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="The method used to create the allele",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="formz.gentechmethod",
                verbose_name="made by method",
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrainallele",
            name="reference_strain",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.wormstrain",
                verbose_name="reference strain",
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrain",
            name="approval_user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrain",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrain",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.wormstrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AddField(
            model_name="historicalwormstrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.wormstrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AddField(
            model_name="historicalsirna",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsirna",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsirna",
            name="species",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="formz.species",
                verbose_name="organism",
            ),
        ),
        migrations.AddField(
            model_name="historicalscpombestrain",
            name="approval_user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalscpombestrain",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalscpombestrain",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalscpombestrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.scpombestrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AddField(
            model_name="historicalscpombestrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.scpombestrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AddField(
            model_name="historicalsacerevisiaestrain",
            name="approval_user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsacerevisiaestrain",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsacerevisiaestrain",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsacerevisiaestrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.sacerevisiaestrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AddField(
            model_name="historicalsacerevisiaestrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.sacerevisiaestrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AddField(
            model_name="historicalplasmid",
            name="approval_user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalplasmid",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalplasmid",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalplasmid",
            name="parent_vector",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.plasmid",
                verbose_name="parent vector",
            ),
        ),
        migrations.AddField(
            model_name="historicalplasmid",
            name="vector_zkbs",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text='The backbone of the plasmid, from the ZKBS database. If not applicable, choose none. <a href="/formz/zkbsplasmid/" target="_blank">View all</a>',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="formz.zkbsplasmid",
                verbose_name="ZKBS database vector",
            ),
        ),
        migrations.AddField(
            model_name="historicaloligo",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicaloligo",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalinhibitor",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalinhibitor",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalecolistrain",
            name="approval_user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalecolistrain",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalecolistrain",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcellline",
            name="approval_user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcellline",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcellline",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcellline",
            name="organism",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="formz.species",
                verbose_name="organism",
            ),
        ),
        migrations.AddField(
            model_name="historicalcellline",
            name="parental_line",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="collection.cellline",
                verbose_name="parental line",
            ),
        ),
        migrations.AddField(
            model_name="historicalcellline",
            name="zkbs_cell_line",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text='If not applicable, choose none. <a href="/formz/zkbscellline/" target="_blank">View all</a>',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="formz.zkbscellline",
                verbose_name="ZKBS database cell line",
            ),
        ),
        migrations.AddField(
            model_name="historicalantibody",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalantibody",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="ecolistraindoc",
            name="ecoli_strain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.ecolistrain"
            ),
        ),
        migrations.AddField(
            model_name="ecolistrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="ecolistrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="ecolistrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.project",
                verbose_name="projects",
            ),
        ),
        migrations.AddField(
            model_name="ecolistrain",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when a feature is not present in the chosen plasmid(s), if any. Searching against the aliases of a feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="sequence features",
            ),
        ),
        migrations.AddField(
            model_name="celllineepisomalplasmid",
            name="cell_line",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.cellline"
            ),
        ),
        migrations.AddField(
            model_name="celllineepisomalplasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                blank=True, related_name="%(class)s_projects", to="formz.project"
            ),
        ),
        migrations.AddField(
            model_name="celllineepisomalplasmid",
            name="plasmid",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.plasmid",
                verbose_name="Plasmid",
            ),
        ),
        migrations.AddField(
            model_name="celllinedoc",
            name="cell_line",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.cellline"
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="episomal_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmids",
                through="collection.CellLineEpisomalPlasmid",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.project",
                verbose_name="projects",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="integrated_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="organism",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="formz.species",
                verbose_name="organism",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="parental_line",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="collection.cellline",
                verbose_name="parental line",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="sequence_features",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when a feature is not present in the chosen plasmid(s), if any. Searching against the aliases of a feature is case-sensitive. <a href="/formz/sequencefeature/" target="_blank">View all/Change</a>',
                related_name="%(class)s_sequence_features",
                to="formz.sequencefeature",
                verbose_name="sequence features",
            ),
        ),
        migrations.AddField(
            model_name="cellline",
            name="zkbs_cell_line",
            field=models.ForeignKey(
                help_text='If not applicable, choose none. <a href="/formz/zkbscellline/" target="_blank">View all</a>',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="formz.zkbscellline",
                verbose_name="ZKBS database cell line",
            ),
        ),
        migrations.AddField(
            model_name="antibodydoc",
            name="antibody",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="collection.antibody"
            ),
        ),
        migrations.AddField(
            model_name="antibody",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
